#![allow(dead_code)]
#![allow(unused_variables)]

// * Separate server & client
// * Default config path and custom config path
// ** Learn how to generate multiple executables for a Rust project, like in this
// **,case, a server executable and a client executable.
// * Configuration
// * Needs Fixing: If an option has more than one argument, only the last
// argument will be taken.
// ** Solution 1: Stick with Unix conventions, an option should only take one
// argument.
// ** Solution 2: Correctly takes multiple arguments for an option.
// * Depoly logging that can be triggered by cli options.

mod cli;
mod conf;

use std::path::PathBuf;
use std::env;
use std::collections::HashMap;

use cli::{ cli_paras_check_valid, CliValidParameters, ALLOW_OPTS_ARGS, MUST_PATTERN};

fn main() {
    let conf_dir: PathBuf = PathBuf::from("~/.config/gtk-cursor-navigator/");
    // let conf_toml_path: String = conf_dir.to_string() + "/" + "config.toml";
    let conf_toml_path: PathBuf = conf_dir.join("config.toml");

    MUST_PATTERN.set(false)
        .expect("The MUST_PATTEN static should only be set once.");
    ALLOW_OPTS_ARGS.set(true)
        .expect("The ALLOW_OPTS_ARGS static should only be set once.");

    let valid_paras: CliValidParameters =
        CliValidParameters {
            patterns: None,
            opts_args: Some(HashMap::from([
                ("-c".to_string(), Some(String::default())),
                ("--config".to_string(), Some(String::default())),
                ("-s".to_string(), Some(String::default())),
                ("--style".to_string(), Some(String::default())),
                ("-d".to_string(), None),
                ("--debug".to_string(), None),
                ("-l".to_string(), Some(String::default())),
                ("--log".to_string(), Some(String::default())),
            ]))
        };

    let cli_args: Vec<String> = env::args().collect();
    let parsed_paras: cli::CliParas = cli::cli_paras_parse(&cli_args);
    cli_paras_check_valid(&parsed_paras, &valid_paras);

    let para_name = parsed_paras.name.clone ();
    let para_pattern = parsed_paras.name.clone();
    // let para_opts_args = parsed_paras.opts_args.clone();
    // let para_opts_args_unwarp = para_opts_args.unwrap_or_default();

    if parsed_paras.contains_opt("-f"){
        println!("YES, -f exists");
    }

    println!("cli_args: {:?}", cli_args);
    println!("parsed_paras: {:?}", parsed_paras);
    println!("conf_toml_path: {:?}", conf_toml_path);
    println!("-f arg: {:?}", parsed_paras.get_arg("-f"));

    // println!("para_opts_args_unwarp: {:?}", para_opts_args_unwarp);
    // println!("para_opts_args_unwarp: {:?}", para_opts_args_unwarp.is_empty());
}
